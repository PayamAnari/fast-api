[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(\n    user_credentials: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_db),\n):\n    user = (\n        db.query(models.User)\n        .filter(models.User.email == user_credentials.username)\n        .first()\n    )\n    if not user:",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags=[\"Authentications\"])\n@router.post(\"/login\", response_model=schemas.Token)\ndef login(\n    user_credentials: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_db),\n):\n    user = (\n        db.query(models.User)\n        .filter(models.User.email == user_credentials.username)\n        .first()",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "favorite_post",
        "kind": 2,
        "importPath": "app.routers.favorite",
        "description": "app.routers.favorite",
        "peekOfCode": "def favorite_post(\n    favorite: schemas.Favorite,\n    db: Session = Depends(database.get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    post = db.query(models.Post).filter(models.Post.id == favorite.post_id).first()\n    if not post:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Post with {favorite.post_id} not found\",",
        "detail": "app.routers.favorite",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.favorite",
        "description": "app.routers.favorite",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/favorite\",\n    tags=[\"favorite\"],\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef favorite_post(\n    favorite: schemas.Favorite,\n    db: Session = Depends(database.get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):",
        "detail": "app.routers.favorite",
        "documentation": {}
    },
    {
        "label": "like_post",
        "kind": 2,
        "importPath": "app.routers.like",
        "description": "app.routers.like",
        "peekOfCode": "def like_post(\n    like: schemas.Like,\n    db: Session = Depends(database.get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    post = db.query(models.Post).filter(models.Post.id == like.post_id).first()\n    if not post:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"Post with {like.post_id} not found\",",
        "detail": "app.routers.like",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.like",
        "description": "app.routers.like",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/likes\",\n    tags=[\"likes\"],\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef like_post(\n    like: schemas.Like,\n    db: Session = Depends(database.get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):",
        "detail": "app.routers.like",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts(\n    db: Session = Depends(get_db),\n    limit: int = 10,\n    skip: int = 0,\n    search: Optional[str] = \"\",\n):\n    posts = (\n        db.query(models.Post, func.count(models.Like.post_id).label(\"likes\"))\n        .join(models.Like, models.Like.post_id == models.Post.id, isouter=True)\n        .group_by(models.Post.id)",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_posts(\n    post: schemas.CreatePost,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    print(current_user)\n    new_post = models.Post(\n        user_id=current_user.id,\n        **post.dict(),\n    )",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_post(\n    id: int,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    post = (\n        db.query(models.Post, func.count(models.Like.post_id).label(\"likes\"))\n        .join(models.Like, models.Like.post_id == models.Post.id, isouter=True)\n        .group_by(models.Post.id)\n        .filter(models.Post.id == id)",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_post(\n    id: int,\n    updated_post: schemas.UpdatePost,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post is None:\n        raise HTTPException(",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_post(\n    id: int,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(prefix=\"/posts\", tags=[\"Posts\"])\n@router.get(\"/\", response_model=List[schemas.PostOut])\ndef get_posts(\n    db: Session = Depends(get_db),\n    limit: int = 10,\n    skip: int = 0,\n    search: Optional[str] = \"\",\n):\n    posts = (\n        db.query(models.Post, func.count(models.Like.post_id).label(\"likes\"))",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    existing_user = (\n        db.query(models.User).filter(models.User.email == user.email).first()\n    )\n    if existing_user:\n        raise HTTPException(\n            status_code=status.HTTP_409_CONFLICT,\n            detail=\"User with this email already exists\",",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_users(db: Session = Depends(get_db)):\n    users = (\n        db.query(models.User, func.count(models.Favorite.post_id).label(\"favorites\"))\n        .outerjoin(models.Favorite, models.Favorite.user_id == models.User.id)\n        .group_by(models.User.id)\n        .all()\n    )\n    user_out_list = []\n    for user, favorites in users:\n        user_out = schemas.UserOut(",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(get_db)):\n    user, favorites = (\n        db.query(models.User, func.count(models.Favorite.post_id).label(\"favorites\"))\n        .outerjoin(models.Favorite, models.Favorite.user_id == models.User.id)\n        .group_by(models.User.id)\n        .filter(models.User.id == id)\n        .first()\n    )\n    if not user:\n        raise HTTPException(",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def update_user(\n    id: int,\n    updated_user: schemas.UserCreate,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def delete_user(\n    id: int,\n    db: Session = Depends(get_db),\n    current_user: int = Depends(oauth2.get_current_user),\n):\n    user = db.query(models.User).filter(models.User.id == id)\n    if user.first() is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"user with id: {id} was not found\",",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(prefix=\"/users\", tags=[\"Users\"])\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    existing_user = (\n        db.query(models.User).filter(models.User.email == user.email).first()\n    )\n    if existing_user:\n        raise HTTPException(",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f\"postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(post.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(post.router)\napp.include_router(user.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default=\"TRUE\", nullable=False)\n    comments = Column(Integer, server_default=\"0\", nullable=False)\n    location = Column(String, nullable=False)\n    created_at = Column(\n        TIMESTAMP(timezone=True), server_default=text(\"now()\"), nullable=False",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    username = Column(String, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    age = Column(Integer, nullable=False)\n    is_active = Column(Boolean, server_default=\"TRUE\", nullable=False)\n    gender = Column(String, nullable=False)\n    created_at = Column(",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Like(Base):\n    __tablename__ = \"likes\"\n    user_id = Column(\n        Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True\n    )\n    post_id = Column(\n        Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True\n    )\nclass Favorite(Base):\n    __tablename__ = \"favorites\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Favorite(Base):\n    __tablename__ = \"favorites\"\n    user_id = Column(\n        Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True\n    )\n    post_id = Column(\n        Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True\n    )",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email: str = payload.get(\"sub\")",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        email: str = payload.get(\"sub\")\n        if email is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(email=email)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(\n    token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)\n):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=f\"Unable to verify credentials. Please provide valid authentication\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.email == token.email).first()",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"login\")\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True\n    location: str\n    comments: int = 0\nclass CreatePost(PostBase):\n    pass\nclass UpdatePost(PostBase):\n    title: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class CreatePost(PostBase):\n    pass\nclass UpdatePost(PostBase):\n    title: str\n    content: str\n    published: bool\n    likes: int\n    comments: int\nclass UserOut(BaseModel):\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UpdatePost",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UpdatePost(PostBase):\n    title: str\n    content: str\n    published: bool\n    likes: int\n    comments: int\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    age: int\n    gender: str\n    is_active: bool\n    created_at: datetime\n    updated_at: datetime\n    favorites: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostUser",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostUser(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    is_active: bool\n    created_at: datetime\nclass Post(PostBase):\n    id: int\n    created_at: datetime\n    user_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(PostBase):\n    id: int\n    created_at: datetime\n    user_id: int\n    owner: PostUser\n    class Config:\n        orm_mode = True\nclass PostOut(BaseModel):\n    Post: Post\n    likes: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostOut(BaseModel):\n    Post: Post\n    likes: int\n    class Config:\n        orm_mode = True\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n    age: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n    age: int\n    gender: str\n    is_active: bool = True\nclass UserUpdate(BaseModel):\n    username: str\n    email: EmailStr",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserUpdate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n    age: int\n    gender: str\n    is_active: bool\n# class UserLogin(BaseModel):\n#     email: EmailStr\n#     password: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    email: str = None\n    is_active: bool = None\n    is_verified: bool = None\nclass Like(BaseModel):\n    post_id: int\n    dir: conint(le=1)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    email: str = None\n    is_active: bool = None\n    is_verified: bool = None\nclass Like(BaseModel):\n    post_id: int\n    dir: conint(le=1)\nclass Favorite(BaseModel):\n    post_id: int\n    dir: conint(le=1)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Like(BaseModel):\n    post_id: int\n    dir: conint(le=1)\nclass Favorite(BaseModel):\n    post_id: int\n    dir: conint(le=1)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Favorite(BaseModel):\n    post_id: int\n    dir: conint(le=1)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]